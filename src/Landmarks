import cv2
import cv2.cv as cv
import os
import numpy as np
import fnmatch
import csv
import math
import matplotlib.pyplot as plt

def getLandmarks(directory, tooth):
    """
        This function gets the landmarks for the given tooth.
        params:
            directory : folder with landmarks files
            tooth : string identifier of tooth
    """
    
    landmarksArray = []
    for filename in fnmatch.filter(os.listdir(directory),'*-'+tooth+'.txt'):
        with open(directory+"/"+filename) as landmarkFile:
            landmarkVector = np.array(landmarkFile.readlines(), dtype=float)
            landmarksArray.append(landmarkVector)
    
    return np.array(landmarksArray)
    
def landmarkAsMatrix(landmarkVector):
    """ This function returns the landmark vector as a matrix."""
        
    return landmarkVector.reshape((landmarkVector.shape[0] / 2, 2))

def translateToOrigin(points):
    """ This function translates the points so their center of gravity is at the origin."""
 
    return points - sum(points) / points.shape[0]
    
def scale(points):
    """ This function scales the points that are assumed to be already centered around the origin."""

    scale = sum(pow(sum(pow(points, 2.0) / float(points.shape[0])), 0.5))
    return points / scale

def getRotationAngle(template, points):
    """ This function returns the angle of rotation that best matches the points against the template. """

    numerator = sum(points[:, 0] * template[:, 1] - points[:, 1] * template[:, 0])

    divisor = sum(points[:, 0] * template[:, 0] + points[:, 1] * template[:, 1])

    #   Avoiding dividing by zero
    if divisor == 0.0:
        divisor = 0.00000000001

    return math.atan(numerator / divisor)

def rotateByTheta(points, theta, center_point=(0, 0)):
    """ This function rotates the points by theta around the center point."""

    new_array = np.array(points)

    new_array[0, :] -= center_point[0]
    new_array[1, :] -= center_point[1]

    new_array = np.dot(rotationMatrix(theta),
                    new_array.transpose()).transpose()

    new_array[0, :] += center_point[0]
    new_array[1, :] += center_point[1]

    return new_array

def rotationMatrix(theta):
    """ This function returns the rotation matrix."""

    return np.array([[math.cos(theta), -math.sin(theta)], [math.sin(theta), math.cos(theta)]])
 
def getMeanShape(alignedShapes):
    """ This function returns the mean shape of aligned shapes."""

    return alignedShapes.mean(axis=0)
    
def visualizeLandmark(points, img):
        """ This function visualizes the landmark points that are in matrix notation. """
        
        img = np.zeros(img.shape)

        for i in range(len(points)):
            img[int(points[i, 1]), int(points[i, 0])] = 1

        cv2.imshow('Rendered shape', img)
        cv2.waitKey(0)
        
def visualizeLandmarkOnRadiograph(points, img):
        """ This function visualizes the landmark points that are in matrix notation on the radiograph."""

        for i in range(len(points) - 1):
            cv2.line(img, (int(points[i, 0]), int(points[i, 1])), (int(points[i+1, 0]), int(points[i+1, 1])), (255, 255, 0))
        cv2.line(img, (int(points[0, 0]), int(points[0, 1])), (int(points[len(points) - 1, 0]), int(points[len(points) - 1, 1])), (255, 255, 0))

        cv2.imshow('Rendered shape', img)
        cv2.waitKey(0)
